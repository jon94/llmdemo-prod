# Nginx Load Balancer Configuration for LLM Demo
# Place this in /etc/nginx/sites-available/llm-demo-lb

upstream llm_demo_backend {
    # Load balancing method
    least_conn;  # Use least connections for better performance
    
    # Backend servers (replace with your actual VM IPs)
    server 10.0.1.10:5000 max_fails=3 fail_timeout=30s weight=1;
    server 10.0.1.11:5000 max_fails=3 fail_timeout=30s weight=1;
    server 10.0.1.12:5000 max_fails=3 fail_timeout=30s weight=1;
    server 10.0.1.13:5000 max_fails=3 fail_timeout=30s weight=1;
    
    # Keep-alive connections to backend
    keepalive 32;
}

# Rate limiting for stress tests
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
limit_req_zone $binary_remote_addr zone=stress_limit:10m rate=1000r/s;

server {
    listen 80;
    listen [::]:80;
    server_name dd-demo-sg-llm.com www.dd-demo-sg-llm.com;
    
    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name dd-demo-sg-llm.com www.dd-demo-sg-llm.com;
    
    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/dd-demo-sg-llm.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/dd-demo-sg-llm.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Increase timeouts for LLM responses
    proxy_connect_timeout 60s;
    proxy_send_timeout 180s;
    proxy_read_timeout 180s;
    proxy_buffering off;
    
    # Client settings
    client_max_body_size 10M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    
    # Health check endpoint (bypass rate limiting)
    location /menu {
        proxy_pass http://llm_demo_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Health check specific settings
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }
    
    # API endpoints with rate limiting
    location /api/ {
        # Apply rate limiting based on endpoint
        limit_req zone=api_limit burst=200 nodelay;
        
        proxy_pass http://llm_demo_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        proxy_http_version 1.1;
        
        # Add load balancer identification
        add_header X-Served-By $upstream_addr;
        add_header X-Load-Balancer "nginx-lb";
    }
    
    # Static files (serve directly from load balancer)
    location /static/ {
        alias /var/www/llm-demo/static/;
        expires 1d;
        add_header Cache-Control "public, immutable";
    }
    
    # Root and other paths
    location / {
        limit_req zone=api_limit burst=50 nodelay;
        
        proxy_pass http://llm_demo_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        proxy_http_version 1.1;
    }
    
    # Load balancer status page (restrict access)
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        deny all;
    }
}

# Upstream health monitoring
server {
    listen 8080;
    server_name localhost;
    
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    location /upstream_status {
        access_log off;
        return 200 "Backend Status: $upstream_status\n";
        add_header Content-Type text/plain;
    }
}
